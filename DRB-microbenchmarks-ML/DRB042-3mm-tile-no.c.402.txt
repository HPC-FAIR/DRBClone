#pragma omp parallel for private(c7,c6,c2,c10,c5)
    for (c1 = 0; c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)); c1++) {
        for (c2 = 0; c2 <= (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)); c2++) {
            for (c5 = 0; c5 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)); c5++) {
                for (c6 = 16 * c5; c6 <= ((16 * c5 + 15 < nm + -1 ? 16 * c5 + 15 : nm + -1)); c6++) {
                    for (c7 = 16 * c2; c7 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c7++) {
                        #pragma omp simd
                            for (c10 = 16 * c1; c10 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c10++) {
                                F[c10][c7] += C[c10][c6] * D[c6][c7];
                            }
                    }
                }
            }
        }
    }

#pragma omp parallel for private(c2,c4,c3)
    for (c1 = 0; c1 <= (((((nk + ni + nj + nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + nj + nm + -1) + 16 + 1) / 16) : -((-(nk + ni + nj + nm + -1) + 16 - 1) / 16))) : (nk + ni + nj + nm + -1) / 16)) < (((nk + ni + nj + 2 * nm + -2) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + nj + 2 * nm + -2) + 16 + 1) / 16) : -((-(nk + ni + nj + 2 * nm + -2) + 16 - 1) / 16))) : (nk + ni + nj + 2 * nm + -2) / 16)) ? (((nk + ni + nj + nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + nj + nm + -1) + 16 + 1) / 16) : -((-(nk + ni + nj + nm + -1) + 16 - 1) / 16))) : (nk + ni + nj + nm + -1) / 16)) : (((nk + ni + nj + 2 * nm + -2) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + nj + 2 * nm + -2) + 16 + 1) / 16) : -((-(nk + ni + nj + 2 * nm + -2) + 16 - 1) / 16))) : (nk + ni + nj + 2 * nm + -2) / 16)))); c1++) {
        if (c1 <= (((((((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16))))) {
            for (c2 = 0; c2 <= (((((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) < nk + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) : nk + -1)) < nm + -1 ? ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) < nk + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) < nl + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) : nl + -1)) < nm + -1 ? ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) < nl + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) : nl + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) < nm + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) < nl + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nl > nm ? nl : nm); c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)) < nm + -1 ? ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nl ? nj : nl); c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nm ? nj : nm); c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (((nj > nl ? nj : nl)) > nm ? ((nj > nl ? nj : nl)) : nm); c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) < nm + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nk > nl ? nk : nl); c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nk > nm ? nk : nm); c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (((nk > nl ? nk : nl)) > nm ? ((nk > nl ? nk : nl)) : nm); c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nk ? nj : nk); c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (((nj > nk ? nj : nk)) > nl ? ((nj > nk ? nj : nk)) : nl); c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (((nj > nk ? nj : nk)) > nm ? ((nj > nk ? nj : nk)) : nm); c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) < nk + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nm; c4 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)); c4++) {
                                A[c3][c4] = ((double)c3) * c4 / ni;
                                B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            }
                    }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nj; c4 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c4++) {
                                A[c3][c4] = ((double)c3) * c4 / ni;
                            }
                    }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nk; c4 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c4++) {
                                B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            }
                    }
                }
                for (c3 = nj; c3 <= ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)) < nm + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nj; c4 <= ((((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) < nl + -1 ? ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) : nl + -1)); c4++) {
                                A[c3][c4] = ((double)c3) * c4 / ni;
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = (nj > nl ? nj : nl); c4 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c4++) {
                                A[c3][c4] = ((double)c3) * c4 / ni;
                            }
                    }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nk; c4 <= ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)); c4++) {
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                }
                for (c3 = (nj > nm ? nj : nm); c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nj; c4 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c4++) {
                                A[c3][c4] = ((double)c3) * c4 / ni;
                            }
                    }
                }
                for (c3 = nk; c3 <= ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) < nm + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nk; c4 <= ((((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)) < nm + -1 ? ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)) : nm + -1)); c4++) {
                                C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = (nk > nl ? nk : nl); c4 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c4++) {
                                C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            }
                    }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nm; c4 <= ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)); c4++) {
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                }
                for (c3 = (nk > nm ? nk : nm); c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nm; c4 <= nk + -1; c4++) {
                                A[c3][c4] = ((double)c3) * c4 / ni;
                            }
                    }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nk; c4 <= nm + -1; c4++) {
                                C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            }
                    }
                }
                for (c3 = (nj > nk ? nj : nk); c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nm + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nk; c4 <= ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)); c4++) {
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                }
                for (c3 = (((nj > nk ? nj : nk)) > nm ? ((nj > nk ? nj : nk)) : nm); c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)) < nm + -1 ? ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) < nm + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nl > nm ? nl : nm); c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nl ? nj : nl); c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nm ? nj : nm); c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = (ni > nm ? ni : nm); c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nm; c4 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c4++) {
                                B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            }
                    }
                }
                for (c3 = (ni > nj ? ni : nj); c3 <= ((((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) < nm + -1 ? ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nj; c4 <= ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)); c4++) {
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                }
                for (c3 = (((ni > nj ? ni : nj)) > nm ? ((ni > nj ? ni : nj)) : nm); c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = (ni > nk ? ni : nk); c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nm + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nm; c4 <= ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)); c4++) {
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                }
                for (c3 = (((ni > nk ? ni : nk)) > nm ? ((ni > nk ? ni : nk)) : nm); c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = (((ni > nj ? ni : nj)) > nk ? ((ni > nj ? ni : nj)) : nk); c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) && c1 >= ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) < nk + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nj; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = (nj > nk ? nj : nk); c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= 16 * c2 + 15; c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = (ni > nj ? ni : nj); c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = (ni > nk ? ni : nk); c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16))))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) < nk + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) < nm + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nm ? nj : nm); c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nk > nm ? nk : nm); c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nk ? nj : nk); c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nj; c4 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c4++) {
                                A[c3][c4] = ((double)c3) * c4 / ni;
                            }
                    }
                }
                for (c3 = nk; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nk; c4 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c4++) {
                                C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            }
                    }
                }
                for (c3 = (nj > nk ? nj : nk); c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = (ni > nj ? ni : nj); c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = (ni > nk ? ni : nk); c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)) < nm + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nl ? nj : nl); c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = nm; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = nk; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nm + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = (nk > nm ? nk : nm); c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) < nm + -1 ? ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = (ni > nm ? ni : nm); c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = (ni > nk ? ni : nk); c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) && c1 >= ((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) && c1 >= ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16))))) {
            for (c2 = (nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nm + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) < nl + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nl ? nj : nl); c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nk > nl ? nk : nl); c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nk ? nj : nk); c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = (ni > nm ? ni : nm); c3 <= 16 * c1 + 15; c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) && c1 >= ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))) {
            for (c2 = (nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16))))) {
            for (c2 = (((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) < nm + -1 ? ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nk > nl ? nk : nl); c4 <= 16 * c2 + 15; c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nm; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= 16 * c2 + 15; c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nm + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = (nj > nm ? nj : nm); c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nm + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= 16 * c2 + 15; c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = (ni > nm ? ni : nm); c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = (ni > nj ? ni : nj); c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) && c1 >= ((((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)))) && c1 >= ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nm + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) && c1 >= ((((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) && c1 >= ((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) && c1 >= ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))) {
            for (c2 = (nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16))))) {
            for (c2 = (nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))); c2 <= (((((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)) < nm + -1 ? ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nl > nm ? nl : nm); c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nk > nl ? nk : nl); c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nk > nm ? nk : nm); c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = (ni > nj ? ni : nj); c3 <= 16 * c1 + 15; c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16))))) {
            for (c2 = (((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nj + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nm + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nm + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))) {
            for (c2 = (nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))); c2 <= (((((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nm + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) && c1 >= ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))) {
            for (c2 = (nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))); c2 <= (((((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) && c1 >= ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))) {
            for (c2 = (((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16))))) {
            for (c2 = (((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nm + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) < nl + -1 ? ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)) : nl + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) && c1 >= ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))) {
            for (c2 = (((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16))) {
            for (c2 = (((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)) < nm + -1 ? ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) < nm + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nl > nm ? nl : nm); c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nl ? nj : nl); c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nm ? nj : nm); c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nm; c4 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c4++) {
                                B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            }
                    }
                }
                for (c3 = nj; c3 <= ((((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) < nm + -1 ? ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nj; c4 <= ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)); c4++) {
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                }
                for (c3 = (nj > nm ? nj : nm); c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nm + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    if (c1 == c2) {
                        #pragma omp simd
                            for (c4 = nm; c4 <= ((16 * c1 + 15 < nl + -1 ? 16 * c1 + 15 : nl + -1)); c4++) {
                                D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                            }
                    }
                }
                for (c3 = (nk > nm ? nk : nm); c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = (nj > nk ? nj : nk); c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) && c1 >= ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= 16 * c2 + 15; c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nk + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) < nm + -1 ? ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) && c1 >= ((((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) && c1 >= ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = (nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= 16 * c1 + 15; c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) && c1 >= ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))))) {
            for (c2 = (nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = (((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16))) {
            for (c2 = (nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) < nm + -1 ? ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nl > nm ? nl : nm); c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nl ? nj : nl); c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = (nj > nm ? nj : nm); c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nk; c3 <= 16 * c1 + 15; c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16))) {
            for (c2 = (((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nm + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nm + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nk; c3 <= 16 * c1 + 15; c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16))))) {
            for (c2 = (((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) < nm + -1 ? ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nl + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nl + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) && c1 >= ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))) {
            for (c2 = (nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16))) {
            for (c2 = (((((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nm + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= 16 * c2 + 15; c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= 16 * c2 + 15; c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) && c1 >= ((((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) && c1 >= ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = (nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))); c2 <= (((((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nj; c3 <= 16 * c1 + 15; c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = (((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))) && c1 >= ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))) {
            for (c2 = (nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))); c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nm + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) && c1 >= ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))) {
            for (c2 = (nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))); c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) && c1 >= ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))) {
            for (c2 = (((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16))) {
            for (c2 = (((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))); c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nj; c3 <= 16 * c1 + 15; c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16))) {
            for (c2 = (((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? ((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) && c1 >= ((((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))))) {
            for (c2 = 0; c2 <= (((((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) && c1 >= ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))) {
            for (c2 = (nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))); c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) && c1 >= ((((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) > ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) ? ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16)))) : ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))))) {
            for (c2 = (nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))); c2 <= (((((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = (((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) < (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) ? (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) : (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) && c1 >= ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))) {
            for (c2 = (nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))); c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16))) {
            for (c2 = (((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) > ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16)))) ? ((((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) > ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))) ? ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16)))) : ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16)))))) : ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))); c2 <= (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
    }

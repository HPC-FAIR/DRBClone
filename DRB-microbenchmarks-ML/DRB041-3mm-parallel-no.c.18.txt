#pragma omp parallel for private(c2)
    for (c1 = (0 > ni ? 0 : ni); c1 <= ((((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) < nm + -1 ? ((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) : nm + -1)); c1++) {
        for (c2 = 0; c2 <= ((((nj + -1 < nl + -1 ? nj + -1 : nl + -1)) < nm + -1 ? ((nj + -1 < nl + -1 ? nj + -1 : nl + -1)) : nm + -1)); c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = nl; c2 <= ((nj + -1 < nm + -1 ? nj + -1 : nm + -1)); c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
        }
        for (c2 = nm; c2 <= ((nj + -1 < nl + -1 ? nj + -1 : nl + -1)); c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (nl > nm ? nl : nm); c2 <= nj + -1; c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
        }
        for (c2 = nj; c2 <= ((nl + -1 < nm + -1 ? nl + -1 : nm + -1)); c2++) {
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (nj > nl ? nj : nl); c2 <= nm + -1; c2++) {
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
        }
        for (c2 = (nj > nm ? nj : nm); c2 <= nl + -1; c2++) {
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
    }

#pragma omp parallel
    {
        #pragma omp for private(i,j)
            for (i = 0; i < n; i++)
                for (j = 0; j < m; j++)
                    uold[i][j] = u[i][j];
        #pragma omp for private(i,j,resid) reduction(+: error) nowait
            for (i = 1; i < (n - 1); i++)
                for (j = 1; j < (m - 1); j++) {
                    resid = (ax * (uold[i - 1][j] + uold[i + 1][j]) + ay * (uold[i][j - 1] + uold[i][j + 1]) + b * uold[i][j] - f[i][j]) / b;
                    u[i][j] = uold[i][j] - omega * resid;
                    error = error + resid * resid;
                }
    }

#pragma omp parallel for private(c2,c4,c3)
    for (c1 = 0; c1 <= (((((nk + ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + -1) + 16 + 1) / 16) : -((-(nk + ni + -1) + 16 - 1) / 16))) : (nk + ni + -1) / 16)) < (((nk + ni + nj + -2) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + nj + -2) + 16 + 1) / 16) : -((-(nk + ni + nj + -2) + 16 - 1) / 16))) : (nk + ni + nj + -2) / 16)) ? (((nk + ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + -1) + 16 + 1) / 16) : -((-(nk + ni + -1) + 16 - 1) / 16))) : (nk + ni + -1) / 16)) : (((nk + ni + nj + -2) * 16 < 0 ? ((16 < 0 ? -((-(nk + ni + nj + -2) + 16 + 1) / 16) : -((-(nk + ni + nj + -2) + 16 - 1) / 16))) : (nk + ni + nj + -2) / 16)))); c1++) {
        if (c1 <= (((((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16))))) {
            for (c2 = 0; c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) < nk + -1 ? ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)) : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) < nk + -1 ? ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)) : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                    #pragma omp simd
                        for (c4 = nj; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                    #pragma omp simd
                        for (c4 = nk; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
                for (c3 = nk; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
                for (c3 = ni; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16)) && c1 >= ((nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((ni + -1) * 16 < 0 ? ((16 < 0 ? -((-(ni + -1) + 16 + 1) / 16) : -((-(ni + -1) + 16 - 1) / 16))) : (ni + -1) / 16))) {
            for (c2 = (nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))); c2 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < ni + -1 ? 16 * c1 + 15 : ni + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nk + -1 ? 16 * c2 + 15 : nk + -1)); c4++) {
                            A[c3][c4] = ((double)c3) * c4 / ni;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) && c1 >= ((ni * 16 < 0 ? -(-ni / 16) : ((16 < 0 ? (-ni + -16 - 1) / -16 : (ni + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
        if (c1 <= (((nk + -1) * 16 < 0 ? ((16 < 0 ? -((-(nk + -1) + 16 + 1) / 16) : -((-(nk + -1) + 16 - 1) / 16))) : (nk + -1) / 16))) {
            for (c2 = (nk * 16 < 0 ? -(-nk / 16) : ((16 < 0 ? (-nk + -16 - 1) / -16 : (nk + 16 - 1) / 16))); c2 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nk + -1 ? 16 * c1 + 15 : nk + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nj + -1 ? 16 * c2 + 15 : nj + -1)); c4++) {
                            B[c3][c4] = ((double)c3) * (c4 + 1) / nj;
                        }
                }
            }
        }
    }

#pragma omp parallel for private(c15,c9,c8)
    for (c2 = 0; c2 <= (((n + -1) * 16 < 0 ? ((16 < 0 ? -((-(n + -1) + 16 + 1) / 16) : -((-(n + -1) + 16 - 1) / 16))) : (n + -1) / 16)); c2++) {
        for (c8 = 0; c8 <= (((n + -1) * 16 < 0 ? ((16 < 0 ? -((-(n + -1) + 16 + 1) / 16) : -((-(n + -1) + 16 - 1) / 16))) : (n + -1) / 16)); c8++) {
            for (c9 = (1 > 16 * c8 ? 1 : 16 * c8); c9 <= ((16 * c8 + 15 < n + -1 ? 16 * c8 + 15 : n + -1)); c9++) {
                #pragma omp simd
                    for (c15 = 16 * c2; c15 <= ((16 * c2 + 15 < n + -1 ? 16 * c2 + 15 : n + -1)); c15++) {
                        B[c15][c9] = B[c15][c9] - A[c15][c9] * A[c15][c9] / B[c15][c9 - 1];
                    }
            }
        }
        for (c8 = 0; c8 <= (((n + -1) * 16 < 0 ? ((16 < 0 ? -((-(n + -1) + 16 + 1) / 16) : -((-(n + -1) + 16 - 1) / 16))) : (n + -1) / 16)); c8++) {
            for (c9 = (1 > 16 * c8 ? 1 : 16 * c8); c9 <= ((16 * c8 + 15 < n + -1 ? 16 * c8 + 15 : n + -1)); c9++) {
                #pragma omp simd
                    for (c15 = 16 * c2; c15 <= ((16 * c2 + 15 < n + -1 ? 16 * c2 + 15 : n + -1)); c15++) {
                        X[c15][c9] = X[c15][c9] - X[c15][c9 - 1] * A[c15][c9] / B[c15][c9 - 1];
                    }
            }
        }
        for (c8 = 0; c8 <= (((n + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + -3) + 16 + 1) / 16) : -((-(n + -3) + 16 - 1) / 16))) : (n + -3) / 16)); c8++) {
            for (c9 = 16 * c8; c9 <= ((16 * c8 + 15 < n + -3 ? 16 * c8 + 15 : n + -3)); c9++) {
                #pragma omp simd
                    for (c15 = 16 * c2; c15 <= ((16 * c2 + 15 < n + -1 ? 16 * c2 + 15 : n + -1)); c15++) {
                        X[c15][n - c9 - 2] = (X[c15][n - 2 - c9] - X[c15][n - 2 - c9 - 1] * A[c15][n - c9 - 3]) / B[c15][n - 3 - c9];
                    }
            }
        }
    }

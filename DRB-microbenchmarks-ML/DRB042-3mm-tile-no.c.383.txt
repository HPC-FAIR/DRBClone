#pragma omp parallel for private(c2,c4,c3)
    for (c1 = 0; c1 <= (((nj + nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + nm + -1) + 16 + 1) / 16) : -((-(nj + nm + -1) + 16 - 1) / 16))) : (nj + nm + -1) / 16)); c1++) {
        if (c1 <= (((((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16))))) {
            for (c2 = 0; c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) < nm + -1 ? ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)) : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) < nm + -1 ? ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)) : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                    #pragma omp simd
                        for (c4 = nl; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                    #pragma omp simd
                        for (c4 = nm; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
                for (c3 = nm; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
                for (c3 = nj; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16)) && c1 >= ((nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((nj + -1) * 16 < 0 ? ((16 < 0 ? -((-(nj + -1) + 16 + 1) / 16) : -((-(nj + -1) + 16 - 1) / 16))) : (nj + -1) / 16))) {
            for (c2 = (0 > ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16)))) ? 0 : ((nl * 16 < 0 ? -(-nl / 16) : ((16 < 0 ? (-nl + -16 - 1) / -16 : (nl + 16 - 1) / 16))))); c2 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nj + -1 ? 16 * c1 + 15 : nj + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nm + -1 ? 16 * c2 + 15 : nm + -1)); c4++) {
                            C[c3][c4] = ((double)c3) * (c4 + 3) / nl;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) && c1 >= ((nj * 16 < 0 ? -(-nj / 16) : ((16 < 0 ? (-nj + -16 - 1) / -16 : (nj + 16 - 1) / 16))))) {
            for (c2 = 0; c2 <= (((((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) < (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)) ? (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)) : (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16)))); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
        if (c1 <= (((nm + -1) * 16 < 0 ? ((16 < 0 ? -((-(nm + -1) + 16 + 1) / 16) : -((-(nm + -1) + 16 - 1) / 16))) : (nm + -1) / 16))) {
            for (c2 = (nm * 16 < 0 ? -(-nm / 16) : ((16 < 0 ? (-nm + -16 - 1) / -16 : (nm + 16 - 1) / 16))); c2 <= (((nl + -1) * 16 < 0 ? ((16 < 0 ? -((-(nl + -1) + 16 + 1) / 16) : -((-(nl + -1) + 16 - 1) / 16))) : (nl + -1) / 16)); c2++) {
                for (c3 = 16 * c1; c3 <= ((16 * c1 + 15 < nm + -1 ? 16 * c1 + 15 : nm + -1)); c3++) {
                    #pragma omp simd
                        for (c4 = 16 * c2; c4 <= ((16 * c2 + 15 < nl + -1 ? 16 * c2 + 15 : nl + -1)); c4++) {
                            D[c3][c4] = ((double)c3) * (c4 + 2) / nk;
                        }
                }
            }
        }
    }

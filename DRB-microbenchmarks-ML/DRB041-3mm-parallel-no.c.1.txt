#pragma omp parallel for private(c2)
    for (c1 = 0; c1 <= ((((((ni + -1 < nj + -1 ? ni + -1 : nj + -1)) < nk + -1 ? ((ni + -1 < nj + -1 ? ni + -1 : nj + -1)) : nk + -1)) < nm + -1 ? ((((ni + -1 < nj + -1 ? ni + -1 : nj + -1)) < nk + -1 ? ((ni + -1 < nj + -1 ? ni + -1 : nj + -1)) : nk + -1)) : nm + -1)); c1++) {
        for (c2 = 0; c2 <= ((((((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) < nl + -1 ? ((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) : nl + -1)) < nm + -1 ? ((((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) < nl + -1 ? ((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) : nl + -1)) : nm + -1)); c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = nl; c2 <= ((((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) < nm + -1 ? ((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) : nm + -1)); c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
        }
        for (c2 = nm; c2 <= ((((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) < nl + -1 ? ((nj + -1 < nk + -1 ? nj + -1 : nk + -1)) : nl + -1)); c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (nl > nm ? nl : nm); c2 <= ((nj + -1 < nk + -1 ? nj + -1 : nk + -1)); c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
        }
        for (c2 = nj; c2 <= ((((nk + -1 < nl + -1 ? nk + -1 : nl + -1)) < nm + -1 ? ((nk + -1 < nl + -1 ? nk + -1 : nl + -1)) : nm + -1)); c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (nj > nl ? nj : nl); c2 <= ((nk + -1 < nm + -1 ? nk + -1 : nm + -1)); c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
        }
        for (c2 = (nj > nm ? nj : nm); c2 <= ((nk + -1 < nl + -1 ? nk + -1 : nl + -1)); c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (((nj > nl ? nj : nl)) > nm ? ((nj > nl ? nj : nl)) : nm); c2 <= nk + -1; c2++) {
            A[c1][c2] = ((double)c1) * c2 / ni;
        }
        for (c2 = nk; c2 <= ((((nj + -1 < nl + -1 ? nj + -1 : nl + -1)) < nm + -1 ? ((nj + -1 < nl + -1 ? nj + -1 : nl + -1)) : nm + -1)); c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (nk > nl ? nk : nl); c2 <= ((nj + -1 < nm + -1 ? nj + -1 : nm + -1)); c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
        }
        for (c2 = (nk > nm ? nk : nm); c2 <= ((nj + -1 < nl + -1 ? nj + -1 : nl + -1)); c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (((nk > nl ? nk : nl)) > nm ? ((nk > nl ? nk : nl)) : nm); c2 <= nj + -1; c2++) {
            B[c1][c2] = ((double)c1) * (c2 + 1) / nj;
        }
        for (c2 = (nj > nk ? nj : nk); c2 <= ((nl + -1 < nm + -1 ? nl + -1 : nm + -1)); c2++) {
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
        for (c2 = (((nj > nk ? nj : nk)) > nl ? ((nj > nk ? nj : nk)) : nl); c2 <= nm + -1; c2++) {
            C[c1][c2] = ((double)c1) * (c2 + 3) / nl;
        }
        for (c2 = (((nj > nk ? nj : nk)) > nm ? ((nj > nk ? nj : nk)) : nm); c2 <= nl + -1; c2++) {
            D[c1][c2] = ((double)c1) * (c2 + 2) / nk;
        }
    }

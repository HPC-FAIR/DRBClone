#pragma omp parallel for private(c5,c4,c2,c3)
    for (c1 = (((2 * c0 * 3 < 0 ? -(-(2 * c0) / 3) : ((3 < 0 ? (-(2 * c0) + -3 - 1) / -3 : (2 * c0 + 3 - 1) / 3)))) > (((16 * c0 + -1 * tsteps + 1) * 16 < 0 ? -(-(16 * c0 + -1 * tsteps + 1) / 16) : ((16 < 0 ? (-(16 * c0 + -1 * tsteps + 1) + -16 - 1) / -16 : (16 * c0 + -1 * tsteps + 1 + 16 - 1) / 16)))) ? ((2 * c0 * 3 < 0 ? -(-(2 * c0) / 3) : ((3 < 0 ? (-(2 * c0) + -3 - 1) / -3 : (2 * c0 + 3 - 1) / 3)))) : (((16 * c0 + -1 * tsteps + 1) * 16 < 0 ? -(-(16 * c0 + -1 * tsteps + 1) / 16) : ((16 < 0 ? (-(16 * c0 + -1 * tsteps + 1) + -16 - 1) / -16 : (16 * c0 + -1 * tsteps + 1 + 16 - 1) / 16))))); c1 <= (((((((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)) < (((32 * c0 + n + 29) * 48 < 0 ? ((48 < 0 ? -((-(32 * c0 + n + 29) + 48 + 1) / 48) : -((-(32 * c0 + n + 29) + 48 - 1) / 48))) : (32 * c0 + n + 29) / 48)) ? (((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)) : (((32 * c0 + n + 29) * 48 < 0 ? ((48 < 0 ? -((-(32 * c0 + n + 29) + 48 + 1) / 48) : -((-(32 * c0 + n + 29) + 48 - 1) / 48))) : (32 * c0 + n + 29) / 48)))) < c0 ? (((((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)) < (((32 * c0 + n + 29) * 48 < 0 ? ((48 < 0 ? -((-(32 * c0 + n + 29) + 48 + 1) / 48) : -((-(32 * c0 + n + 29) + 48 - 1) / 48))) : (32 * c0 + n + 29) / 48)) ? (((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)) : (((32 * c0 + n + 29) * 48 < 0 ? ((48 < 0 ? -((-(32 * c0 + n + 29) + 48 + 1) / 48) : -((-(32 * c0 + n + 29) + 48 - 1) / 48))) : (32 * c0 + n + 29) / 48)))) : c0)); c1++) {
        for (c2 = ((((16 * c1 + -1 * n + -12) * 16 < 0 ? -(-(16 * c1 + -1 * n + -12) / 16) : ((16 < 0 ? (-(16 * c1 + -1 * n + -12) + -16 - 1) / -16 : (16 * c1 + -1 * n + -12 + 16 - 1) / 16)))) > 2 * c0 + -2 * c1 ? (((16 * c1 + -1 * n + -12) * 16 < 0 ? -(-(16 * c1 + -1 * n + -12) / 16) : ((16 < 0 ? (-(16 * c1 + -1 * n + -12) + -16 - 1) / -16 : (16 * c1 + -1 * n + -12 + 16 - 1) / 16)))) : 2 * c0 + -2 * c1); c2 <= (((((((16 * c1 + n + 12) * 16 < 0 ? ((16 < 0 ? -((-(16 * c1 + n + 12) + 16 + 1) / 16) : -((-(16 * c1 + n + 12) + 16 - 1) / 16))) : (16 * c1 + n + 12) / 16)) < (((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)) ? (((16 * c1 + n + 12) * 16 < 0 ? ((16 < 0 ? -((-(16 * c1 + n + 12) + 16 + 1) / 16) : -((-(16 * c1 + n + 12) + 16 - 1) / 16))) : (16 * c1 + n + 12) / 16)) : (((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)))) < (((32 * c0 + -32 * c1 + n + 29) * 16 < 0 ? ((16 < 0 ? -((-(32 * c0 + -32 * c1 + n + 29) + 16 + 1) / 16) : -((-(32 * c0 + -32 * c1 + n + 29) + 16 - 1) / 16))) : (32 * c0 + -32 * c1 + n + 29) / 16)) ? (((((16 * c1 + n + 12) * 16 < 0 ? ((16 < 0 ? -((-(16 * c1 + n + 12) + 16 + 1) / 16) : -((-(16 * c1 + n + 12) + 16 - 1) / 16))) : (16 * c1 + n + 12) / 16)) < (((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)) ? (((16 * c1 + n + 12) * 16 < 0 ? ((16 < 0 ? -((-(16 * c1 + n + 12) + 16 + 1) / 16) : -((-(16 * c1 + n + 12) + 16 - 1) / 16))) : (16 * c1 + n + 12) / 16)) : (((n + 2 * tsteps + -3) * 16 < 0 ? ((16 < 0 ? -((-(n + 2 * tsteps + -3) + 16 + 1) / 16) : -((-(n + 2 * tsteps + -3) + 16 - 1) / 16))) : (n + 2 * tsteps + -3) / 16)))) : (((32 * c0 + -32 * c1 + n + 29) * 16 < 0 ? ((16 < 0 ? -((-(32 * c0 + -32 * c1 + n + 29) + 16 + 1) / 16) : -((-(32 * c0 + -32 * c1 + n + 29) + 16 - 1) / 16))) : (32 * c0 + -32 * c1 + n + 29) / 16)))); c2++) {
            if (c0 <= (((32 * c1 + 16 * c2 + -1 * n + 1) * 32 < 0 ? ((32 < 0 ? -((-(32 * c1 + 16 * c2 + -1 * n + 1) + 32 + 1) / 32) : -((-(32 * c1 + 16 * c2 + -1 * n + 1) + 32 - 1) / 32))) : (32 * c1 + 16 * c2 + -1 * n + 1) / 32)) && c1 <= c2 + -1) {
                if ((n + 1) % 2 == 0) {
                    for (c4 = (16 * c1 > 16 * c2 + -1 * n + 3 ? 16 * c1 : 16 * c2 + -1 * n + 3); c4 <= 16 * c1 + 15; c4++) {
                        A[-16 * c2 + c4 + n + -2][n + -2] = B[-16 * c2 + c4 + n + -2][n + -2];
                    }
                }
            }
            if (c0 <= (((48 * c1 + -1 * n + 1) * 32 < 0 ? ((32 < 0 ? -((-(48 * c1 + -1 * n + 1) + 32 + 1) / 32) : -((-(48 * c1 + -1 * n + 1) + 32 - 1) / 32))) : (48 * c1 + -1 * n + 1) / 32)) && c1 >= c2) {
                if ((n + 1) % 2 == 0) {
                    for (c5 = (16 * c2 > 16 * c1 + -1 * n + 3 ? 16 * c2 : 16 * c1 + -1 * n + 3); c5 <= ((16 * c1 < 16 * c2 + 15 ? 16 * c1 : 16 * c2 + 15)); c5++) {
                        A[n + -2][-16 * c1 + c5 + n + -2] = B[n + -2][-16 * c1 + c5 + n + -2];
                    }
                }
            }
            for (c3 = ((((((16 * c1 + -1 * n + 2) * 2 < 0 ? -(-(16 * c1 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c1 + -1 * n + 2) + -2 - 1) / -2 : (16 * c1 + -1 * n + 2 + 2 - 1) / 2)))) > (((16 * c2 + -1 * n + 2) * 2 < 0 ? -(-(16 * c2 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c2 + -1 * n + 2) + -2 - 1) / -2 : (16 * c2 + -1 * n + 2 + 2 - 1) / 2)))) ? (((16 * c1 + -1 * n + 2) * 2 < 0 ? -(-(16 * c1 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c1 + -1 * n + 2) + -2 - 1) / -2 : (16 * c1 + -1 * n + 2 + 2 - 1) / 2)))) : (((16 * c2 + -1 * n + 2) * 2 < 0 ? -(-(16 * c2 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c2 + -1 * n + 2) + -2 - 1) / -2 : (16 * c2 + -1 * n + 2 + 2 - 1) / 2)))))) > 16 * c0 + -16 * c1 ? (((((16 * c1 + -1 * n + 2) * 2 < 0 ? -(-(16 * c1 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c1 + -1 * n + 2) + -2 - 1) / -2 : (16 * c1 + -1 * n + 2 + 2 - 1) / 2)))) > (((16 * c2 + -1 * n + 2) * 2 < 0 ? -(-(16 * c2 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c2 + -1 * n + 2) + -2 - 1) / -2 : (16 * c2 + -1 * n + 2 + 2 - 1) / 2)))) ? (((16 * c1 + -1 * n + 2) * 2 < 0 ? -(-(16 * c1 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c1 + -1 * n + 2) + -2 - 1) / -2 : (16 * c1 + -1 * n + 2 + 2 - 1) / 2)))) : (((16 * c2 + -1 * n + 2) * 2 < 0 ? -(-(16 * c2 + -1 * n + 2) / 2) : ((2 < 0 ? (-(16 * c2 + -1 * n + 2) + -2 - 1) / -2 : (16 * c2 + -1 * n + 2 + 2 - 1) / 2)))))) : 16 * c0 + -16 * c1); c3 <= ((((((8 * c1 + 6 < 8 * c2 + 6 ? 8 * c1 + 6 : 8 * c2 + 6)) < tsteps + -1 ? ((8 * c1 + 6 < 8 * c2 + 6 ? 8 * c1 + 6 : 8 * c2 + 6)) : tsteps + -1)) < 16 * c0 + -16 * c1 + 15 ? ((((8 * c1 + 6 < 8 * c2 + 6 ? 8 * c1 + 6 : 8 * c2 + 6)) < tsteps + -1 ? ((8 * c1 + 6 < 8 * c2 + 6 ? 8 * c1 + 6 : 8 * c2 + 6)) : tsteps + -1)) : 16 * c0 + -16 * c1 + 15)); c3++) {
                if (c1 <= ((c3 * 8 < 0 ? ((8 < 0 ? -((-c3 + 8 + 1) / 8) : -((-c3 + 8 - 1) / 8))) : c3 / 8))) {
                    for (c5 = (16 * c2 > 2 * c3 + 1 ? 16 * c2 : 2 * c3 + 1); c5 <= ((16 * c2 + 15 < 2 * c3 + n + -2 ? 16 * c2 + 15 : 2 * c3 + n + -2)); c5++) {
                        B[1][-2 * c3 + c5] = 0.20000000000000001 * (A[1][-2 * c3 + c5] + A[1][-2 * c3 + c5 - 1] + A[1][1 + (-2 * c3 + c5)] + A[1 + 1][-2 * c3 + c5] + A[1 - 1][-2 * c3 + c5]);
                    }
                }
                for (c4 = (16 * c1 > 2 * c3 + 2 ? 16 * c1 : 2 * c3 + 2); c4 <= ((16 * c1 + 15 < 2 * c3 + n + -2 ? 16 * c1 + 15 : 2 * c3 + n + -2)); c4++) {
                    if (c2 <= ((c3 * 8 < 0 ? ((8 < 0 ? -((-c3 + 8 + 1) / 8) : -((-c3 + 8 - 1) / 8))) : c3 / 8))) {
                        B[-2 * c3 + c4][1] = 0.20000000000000001 * (A[-2 * c3 + c4][1] + A[-2 * c3 + c4][1 - 1] + A[-2 * c3 + c4][1 + 1] + A[1 + (-2 * c3 + c4)][1] + A[-2 * c3 + c4 - 1][1]);
                    }
                    for (c5 = (16 * c2 > 2 * c3 + 2 ? 16 * c2 : 2 * c3 + 2); c5 <= ((16 * c2 + 15 < 2 * c3 + n + -2 ? 16 * c2 + 15 : 2 * c3 + n + -2)); c5++) {
                        B[-2 * c3 + c4][-2 * c3 + c5] = 0.20000000000000001 * (A[-2 * c3 + c4][-2 * c3 + c5] + A[-2 * c3 + c4][-2 * c3 + c5 - 1] + A[-2 * c3 + c4][1 + (-2 * c3 + c5)] + A[1 + (-2 * c3 + c4)][-2 * c3 + c5] + A[-2 * c3 + c4 - 1][-2 * c3 + c5]);
                        A[-2 * c3 + c4 + -1][-2 * c3 + c5 + -1] = B[-2 * c3 + c4 + -1][-2 * c3 + c5 + -1];
                    }
                    if (c2 >= (((2 * c3 + n + -16) * 16 < 0 ? -(-(2 * c3 + n + -16) / 16) : ((16 < 0 ? (-(2 * c3 + n + -16) + -16 - 1) / -16 : (2 * c3 + n + -16 + 16 - 1) / 16))))) {
                        A[-2 * c3 + c4 + -1][n + -2] = B[-2 * c3 + c4 + -1][n + -2];
                    }
                }
                if (c1 >= (((2 * c3 + n + -16) * 16 < 0 ? -(-(2 * c3 + n + -16) / 16) : ((16 < 0 ? (-(2 * c3 + n + -16) + -16 - 1) / -16 : (2 * c3 + n + -16 + 16 - 1) / 16))))) {
                    for (c5 = (16 * c2 > 2 * c3 + 2 ? 16 * c2 : 2 * c3 + 2); c5 <= ((16 * c2 + 15 < 2 * c3 + n + -1 ? 16 * c2 + 15 : 2 * c3 + n + -1)); c5++) {
                        A[n + -2][-2 * c3 + c5 + -1] = B[n + -2][-2 * c3 + c5 + -1];
                    }
                }
            }
            if (c0 >= (((2 * c1 + c2 + -1) * 2 < 0 ? -(-(2 * c1 + c2 + -1) / 2) : ((2 < 0 ? (-(2 * c1 + c2 + -1) + -2 - 1) / -2 : (2 * c1 + c2 + -1 + 2 - 1) / 2)))) && c1 >= c2 + 1 && c2 <= (((tsteps + -8) * 8 < 0 ? ((8 < 0 ? -((-(tsteps + -8) + 8 + 1) / 8) : -((-(tsteps + -8) + 8 - 1) / 8))) : (tsteps + -8) / 8))) {
                for (c4 = 16 * c1; c4 <= ((16 * c1 + 15 < 16 * c2 + n + 12 ? 16 * c1 + 15 : 16 * c2 + n + 12)); c4++) {
                    B[-16 * c2 + c4 + -14][1] = 0.20000000000000001 * (A[-16 * c2 + c4 + -14][1] + A[-16 * c2 + c4 + -14][1 - 1] + A[-16 * c2 + c4 + -14][1 + 1] + A[1 + (-16 * c2 + c4 + -14)][1] + A[-16 * c2 + c4 + -14 - 1][1]);
                }
            }
            if (c0 >= (((3 * c1 + -1) * 2 < 0 ? -(-(3 * c1 + -1) / 2) : ((2 < 0 ? (-(3 * c1 + -1) + -2 - 1) / -2 : (3 * c1 + -1 + 2 - 1) / 2)))) && c1 <= (((((tsteps + -8) * 8 < 0 ? ((8 < 0 ? -((-(tsteps + -8) + 8 + 1) / 8) : -((-(tsteps + -8) + 8 - 1) / 8))) : (tsteps + -8) / 8)) < c2 ? (((tsteps + -8) * 8 < 0 ? ((8 < 0 ? -((-(tsteps + -8) + 8 + 1) / 8) : -((-(tsteps + -8) + 8 - 1) / 8))) : (tsteps + -8) / 8)) : c2))) {
                for (c5 = (16 * c2 > 16 * c1 + 15 ? 16 * c2 : 16 * c1 + 15); c5 <= ((16 * c2 + 15 < 16 * c1 + n + 12 ? 16 * c2 + 15 : 16 * c1 + n + 12)); c5++) {
                    B[1][-16 * c1 + c5 + -14] = 0.20000000000000001 * (A[1][-16 * c1 + c5 + -14] + A[1][-16 * c1 + c5 + -14 - 1] + A[1][1 + (-16 * c1 + c5 + -14)] + A[1 + 1][-16 * c1 + c5 + -14] + A[1 - 1][-16 * c1 + c5 + -14]);
                }
            }
        }
    }

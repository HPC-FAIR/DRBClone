#pragma omp parallel for private(c2)
    for (c1 = ((((2 * c0 + 2) * 3 < 0 ? -(-(2 * c0 + 2) / 3) : ((3 < 0 ? (-(2 * c0 + 2) + -3 - 1) / -3 : (2 * c0 + 2 + 3 - 1) / 3)))) > c0 + -9 ? (((2 * c0 + 2) * 3 < 0 ? -(-(2 * c0 + 2) / 3) : ((3 < 0 ? (-(2 * c0 + 2) + -3 - 1) / -3 : (2 * c0 + 2 + 3 - 1) / 3)))) : c0 + -9); c1 <= (((((2 * c0 + 498) * 3 < 0 ? ((3 < 0 ? -((-(2 * c0 + 498) + 3 + 1) / 3) : -((-(2 * c0 + 498) + 3 - 1) / 3))) : (2 * c0 + 498) / 3)) < c0 ? (((2 * c0 + 498) * 3 < 0 ? ((3 < 0 ? -((-(2 * c0 + 498) + 3 + 1) / 3) : -((-(2 * c0 + 498) + 3 - 1) / 3))) : (2 * c0 + 498) / 3)) : c0)); c1++) {
        B[-2 * c0 + 3 * c1][1] = 0.20000000000000001 * (A[-2 * c0 + 3 * c1][1] + A[-2 * c0 + 3 * c1][1 - 1] + A[-2 * c0 + 3 * c1][1 + 1] + A[1 + (-2 * c0 + 3 * c1)][1] + A[-2 * c0 + 3 * c1 - 1][1]);
        for (c2 = 2 * c0 + -2 * c1 + 2; c2 <= 2 * c0 + -2 * c1 + 498; c2++) {
            A[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1] = B[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1];
            B[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] = 0.20000000000000001 * (A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2 - 1] + A[-2 * c0 + 3 * c1][1 + (-2 * c0 + 2 * c1 + c2)] + A[1 + (-2 * c0 + 3 * c1)][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1 - 1][-2 * c0 + 2 * c1 + c2]);
        }
        A[-2 * c0 + 3 * c1 + -1][498] = B[-2 * c0 + 3 * c1 + -1][498];
    }
